import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'
import anecdoteService from '../components/anecdotes'

const getId = () => (100000 * Math.random()).toFixed(0)

const initialState = []

export const initializeAnecdotes = createAsyncThunk(
  'anecdotes/initializeAnecdotes',
  async () => {
    const anecdotes = await anecdoteService.getAll()
    return anecdotes
  }
)

// Async thunk to create a new anecdote
export const createAnecdote = createAsyncThunk(
  'anecdotes/createAnecdote',
  async (content) => {
    const newAnecdote = await anecdoteService.createNew(content)
    return newAnecdote  
  }
)

export const voteAnecdote = createAsyncThunk(
  'anecdotes/voteAnecdote',
  async (anecdote) => {
    const updatedAnecdote = await anecdoteService.updateVote(anecdote)
    return updatedAnecdote
  }
)

const anecdoteSlice = createSlice({
  name: 'anecdotes',
  initialState,
  reducers: {
    
    addAnecdote(state, action) {
      const newAnecdote = {
        content: action.payload,
        id: getId(),
        votes: 0
      };
      state.push(newAnecdote);
    },
    appendAnecdotes(state, action) {
      state.push(action.payload)
    },
    setAnecdotes(state, action) {
      return action.payload // Replaces the entire state with the fetched anecdotes
    }
  },
  
  extraReducers: (builder) => {
    builder
      // Handle the async action for initializing anecdotes
      .addCase(initializeAnecdotes.fulfilled, (state, action) => {
        return action.payload  // Set the state to the fetched anecdotes
      })
      // Handle the async action for creating a new anecdote
      .addCase(createAnecdote.fulfilled, (state, action) => {
        state.push(action.payload)  // Add the newly created anecdote to the state
      })
      .addCase(voteAnecdote.fulfilled, (state, action) => {
        const updatedAnecdote = action.payload
        const index = state.findIndex(a => a.id === updatedAnecdote.id)
        if (index !== -1) {
          state[index] = updatedAnecdote
        }
      })
  }
});

// Export actions generated by createSlice
export const { addAnecdote,appendAnecdotes ,setAnecdotes} = anecdoteSlice.actions;

// Export the reducer to be used in the store
export default anecdoteSlice.reducer;
